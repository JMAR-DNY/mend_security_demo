# jenkins/casc_configs/jenkins.yaml
jenkins:
  systemMessage: "Mend Security Demo - Jenkins Configured with JCasC"
  numExecutors: 2
  scmCheckoutRetryCount: 3
  mode: NORMAL
  
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          password: "admin"
          
  authorizationStrategy:
    globalMatrix:
      permissions:
        - "Overall/Administer:admin"
        - "Overall/Read:authenticated"

  remotingSecurity:
    enabled: true

  nodes:
    - permanent:
        name: "built-in"
        numExecutors: 2

# Disable CSRF for demo purposes
security:
  queueItemAuthenticator:
    authenticators:
      - global:
          strategy: triggeringUsersAuthorizationStrategy

# Configure global tools
tool:
  git:
    installations:
      - name: "Default"
        home: "/usr/bin/git"
  
  maven:
    installations:
      - name: "Maven-3.9"
        properties:
          - installSource:
              installers:
                - maven:
                    id: "3.9.5"

# Configure credentials
credentials:
  system:
    domainCredentials:
      - credentials:
          - string:
              scope: GLOBAL
              id: "dt-api-key"
              description: "Dependency Track API Key"
              secret: "odt_0EvOUOJftaK9PHrVIh4yL1LgbAYHLhtJ"

# Configure jobs
jobs:
  - script: |
      pipelineJob('webgoat-security-scan') {
        description('WebGoat v8.1.0 Security Scan Pipeline - Automated SBOM generation and upload')
        
        definition {
          cps {
            script('''
pipeline {
    agent any
    
    environment {
        DT_API_URL = 'http://dependency-track-apiserver:8080'
        DT_API_KEY = credentials('dt-api-key')
        WEBGOAT_REPO = 'https://github.com/WebGoat/WebGoat.git'
        WEBGOAT_TAG = 'v8.1.0'
        PROJECT_NAME = 'WebGoat'
        PROJECT_VERSION = '8.1.0'
    }
    
    options {
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Cloning WebGoat v8.1.0...'
                git branch: "${WEBGOAT_TAG}", url: "${WEBGOAT_REPO}"
            }
        }
        
        stage('Build Application') {
            steps {
                echo 'üî® Building WebGoat application...'
                sh '''
                    mvn clean compile package -DskipTests -Dmaven.javadoc.skip=true
                    ls -la target/
                '''
            }
        }
        
        stage('Dependency Check Scan') {
            steps {
                echo 'üîç Running OWASP Dependency Check...'
                script {
                    try {
                        sh '''
                            # Download and run dependency check
                            if [ ! -f "dependency-check/bin/dependency-check.sh" ]; then
                                wget -q https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.3/dependency-check-8.4.3-release.zip
                                unzip -q dependency-check-8.4.3-release.zip
                            fi
                            
                            ./dependency-check/bin/dependency-check.sh \\
                                --project "WebGoat" \\
                                --scan . \\
                                --format ALL \\
                                --out reports \\
                                --enableRetired \\
                                --enableExperimental || echo "Dependency check completed with findings"
                        '''
                    } catch (Exception e) {
                        echo "Dependency Check completed with findings: ${e.getMessage()}"
                        // Continue pipeline even if vulnerabilities are found
                    }
                }
            }
        }
        
        stage('Generate SBOM') {
            steps {
                echo 'üìã Generating CycloneDX SBOM...'
                sh '''
                    # Generate SBOM using CycloneDX Maven plugin
                    mvn org.cyclonedx:cyclonedx-maven-plugin:2.7.9:makeAggregateBom \\
                        -Dorg.cyclonedx.maven.projectType=application \\
                        -Dorg.cyclonedx.maven.schemaVersion=1.4 \\
                        -Dorg.cyclonedx.maven.outputFormat=json \\
                        -Dorg.cyclonedx.maven.outputName=webgoat-bom
                    
                    # Verify SBOM was created
                    if [ -f "target/webgoat-bom.json" ]; then
                        echo "‚úÖ SBOM generated successfully"
                        echo "SBOM file size: $(wc -c < target/webgoat-bom.json) bytes"
                        echo "Components found: $(grep -o '\\"type\\":\\"library\\"' target/webgoat-bom.json | wc -l)"
                    else
                        echo "‚ùå SBOM generation failed"
                        exit 1
                    fi
                '''
            }
        }
        
        stage('Upload to Dependency Track') {
            steps {
                echo '‚¨ÜÔ∏è Uploading SBOM to Dependency Track...'
                script {
                    try {
                        // First, try to create/update the project
                        def projectResponse = httpRequest(
                            httpMode: 'PUT',
                            url: "${DT_API_URL}/api/v1/project",
                            customHeaders: [
                                [name: 'X-API-Key', value: "${DT_API_KEY}"],
                                [name: 'Content-Type', value: 'application/json']
                            ],
                            requestBody: """
                            {
                                "name": "${PROJECT_NAME}",
                                "version": "${PROJECT_VERSION}",
                                "description": "WebGoat application security scan - Mend Demo",
                                "tags": [
                                    {"name": "demo"},
                                    {"name": "webgoat"},
                                    {"name": "mend-security-scan"}
                                ]
                            }
                            """,
                            validResponseCodes: '200:299,400:499'
                        )
                        
                        echo "Project creation/update response: ${projectResponse.status}"
                        
                        // Upload the SBOM
                        def uploadResponse = httpRequest(
                            httpMode: 'POST',
                            url: "${DT_API_URL}/api/v1/bom",
                            customHeaders: [[name: 'X-API-Key', value: "${DT_API_KEY}"]],
                            multipartName: 'bom',
                            uploadFile: 'target/webgoat-bom.json',
                            validResponseCodes: '200:299'
                        )
                        
                        echo "‚úÖ SBOM upload successful - Status: ${uploadResponse.status}"
                        echo "üéâ Check Dependency Track dashboard for vulnerability analysis!"
                        
                    } catch (Exception e) {
                        echo "‚ùå Failed to upload SBOM: ${e.getMessage()}"
                        echo "This might be due to Dependency Track still initializing or API key issues"
                        echo "Manual upload: Go to http://localhost:8081 and upload target/webgoat-bom.json"
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'üìä Archiving artifacts and reports...'
            
            // Archive dependency check reports
            archiveArtifacts artifacts: 'reports/dependency-check-report.html', fingerprint: true, allowEmptyArchive: true
            archiveArtifacts artifacts: 'reports/dependency-check-report.xml', fingerprint: true, allowEmptyArchive: true
            
            // Archive SBOM
            archiveArtifacts artifacts: 'target/webgoat-bom.json', fingerprint: true, allowEmptyArchive: true
            
            // Archive build artifacts
            archiveArtifacts artifacts: 'target/*.war', fingerprint: true, allowEmptyArchive: true
            
            // Clean workspace
            cleanWs()
        }
        success {
            echo '‚úÖ Security scan pipeline completed successfully!'
            echo ''
            echo 'üåê View Results:'
            echo '   ‚Ä¢ Jenkins Build: http://localhost:8080/job/webgoat-security-scan/'
            echo '   ‚Ä¢ Dependency Track: http://localhost:8081'
            echo '   ‚Ä¢ Dependency Check Report: Check build artifacts'
            echo ''
            echo 'üìã What was accomplished:'
            echo '   ‚Ä¢ WebGoat v8.1.0 cloned and built'
            echo '   ‚Ä¢ Dependency vulnerabilities scanned'
            echo '   ‚Ä¢ SBOM (Software Bill of Materials) generated'
            echo '   ‚Ä¢ Security data uploaded to Dependency Track'
        }
        failure {
            echo '‚ùå Security scan pipeline failed.'
            echo 'üîç Troubleshooting tips:'
            echo '   ‚Ä¢ Check build logs for specific errors'
            echo '   ‚Ä¢ Verify Dependency Track is running: http://localhost:8081'
            echo '   ‚Ä¢ Ensure sufficient disk space and memory'
        }
    }
}
            ''')
            sandbox()
          }
        }
        
        triggers {
          // Can add periodic builds here if needed
        }
      }

# Unclassified configurations
unclassified:
  location:
    adminAddress: "admin@mend-demo.local"
    url: "http://localhost:8080/"
    
  globalLibraries:
    libraries: []