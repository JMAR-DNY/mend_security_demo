# Updated docker-compose.yml with permanent certificate fix
services:
  dependency-track-apiserver:
    image: dependencytrack/apiserver:latest
    container_name: dt-apiserver
    privileged: true
    environment:
      - ALPINE_DATABASE_MODE=external
      - ALPINE_DATABASE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - ALPINE_DATABASE_DRIVER=org.postgresql.Driver
      - ALPINE_DATABASE_USERNAME=${POSTGRES_USER}
      - ALPINE_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - ALPINE_DATABASE_POOL_ENABLED=true
      - ALPINE_DATABASE_POOL_MAX_SIZE=20
      - ALPINE_DATABASE_POOL_MIN_IDLE=10
      - ALPINE_DATABASE_POOL_IDLE_TIMEOUT=300000
      - ALPINE_DATABASE_POOL_MAX_LIFETIME=600000
      - ALPINE_SECRET_KEY_PATH=/var/run/secrets
      - ALPINE_DATA_DIRECTORY=/data
      - ALPINE_CORS_ENABLED=true
      - ALPINE_CORS_ALLOW_ORIGIN=*
      - ALPINE_CORS_ALLOW_METHODS=GET,POST,PUT,DELETE,OPTIONS
      - ALPINE_CORS_ALLOW_HEADERS=Origin,Content-Type,Authorization,X-Requested-With,Content-Length,Accept,Origin,X-Api-Key
      - ALPINE_CORS_EXPOSE_HEADERS=Content-Type,X-Api-Key
      - ALPINE_API_KEY_DEFAULT=${DT_API_KEY}
      - ALPINE_DEFAULT_ADMIN_USERNAME=${DT_ADMIN_USER}
      - ALPINE_DEFAULT_ADMIN_PASSWORD=${DT_ADMIN_PASSWORD}
      - DT_INTERNAL_ANALYZER_FUZZY_ENABLED=${DT_INTERNAL_ANALYZER_FUZZY_ENABLED}
      - DT_INTERNAL_ANALYZER_FUZZY_PURL_ENABLED=${DT_INTERNAL_ANALYZER_FUZZY_PURL_ENABLED}
      - DT_INTERNAL_ANALYZER_FUZZY_INTERNAL_ENABLED=${DT_INTERNAL_ANALYZER_FUZZY_INTERNAL_ENABLED}

      # Enhanced SSL certificate handling
      - JAVA_OPTS=-Dcom.sun.net.ssl.checkRevocation=false -Dtrust_all_cert=true -Dcom.sun.net.ssl.allowUnsafeServerCertChange=true -Dcom.sun.net.ssl.allowUnsafeRenegotiation=true -Djdk.tls.allowUnsafeServerCertChange=true -Djavax.net.ssl.trustStoreType=JKS -Djavax.net.ssl.trustStore=/opt/java/openjdk/lib/security/cacerts
      - JAVA_TOOL_OPTIONS=-Dcom.sun.net.ssl.checkRevocation=false -Dtrust_all_cert=true -Djavax.net.ssl.trustStoreType=JKS
      - ALPINE_TLS_TRUST_ALL_CERTS=true
      - CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
      - SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
      - SSL_CERT_DIR=/etc/ssl/certs
      - REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
      
    env_file:
      - .env
    volumes:
      - 'dt-data:/data'
      - 'dt-tmp:/tmp'
      # Mount certificate initialization script
      - './scripts/init-certificates.sh:/docker-entrypoint-initdb.d/init-certificates.sh:ro'
    ports:
      - "8081:8080"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mend-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/api/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 180s

  postgres:
    image: postgres:15-alpine
    container_name: dt-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - 'postgres-data:/var/lib/postgresql/data'
    restart: unless-stopped
    networks:
      - mend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  jenkins:
    build:
      context: ./jenkins
      dockerfile: Dockerfile
    container_name: jenkins
    user: root
    env_file:
      - .env
    environment:
      - JAVA_OPTS=${JAVA_OPTS}
      - JENKINS_OPTS=${JENKINS_OPTS}
      - CASC_JENKINS_CONFIG=/var/jenkins_home/casc_configs
    volumes:
      - 'jenkins-data:/var/jenkins_home'
      - '/var/run/docker.sock:/var/run/docker.sock'
      - '/var/jenkins_home/tools:/var/jenkins_home/tools'
    ports:
      - "8080:8080"
      - "50000:50000"
    restart: unless-stopped
    networks:
      - mend-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/login || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s
    depends_on:
      dependency-track-apiserver:
        condition: service_healthy

  dependency-track-frontend:
    image: dependencytrack/frontend:latest
    container_name: dt-frontend
    environment:
      - API_BASE_URL=http://localhost:8081
    ports:
      - "8082:8080"
    restart: unless-stopped
    depends_on:
      - dependency-track-apiserver
    networks:
      - mend-network

volumes:
  dt-data:
    driver: local
  dt-tmp:
    driver: local
  postgres-data:
    driver: local
  jenkins-data:
    driver: local

networks:
  mend-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}